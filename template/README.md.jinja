# {{project_name}}

## Prerequisites

To use `{{project_name}}` the following must be available locally:

<!-- markdownlint-disable MD013 -->
- [Python {{python_version}}](https://docs.python.org/{{python_version}}/) or above
- [uv](https://docs.astral.sh/uv/)
- [just](https://github.com/casey/just)

## Quickstart: run locally

A `justfile` defines common development tasks. Run `just` to show all available recipes.

## Develop

This repo follows trunk-based development. This means:

- the `main` branch should always be in a releasable state
- use short-lived feature branches

### Development prerequisites

In addition to the [Prerequisites](#prerequisites) above, you will need the following to
develop `{{project_name}}`:

- [pre-commit](https://pre-commit.com/)

### Dependency management

Dependencies are defined in the `pyproject.toml` file. `uv` is used to manage dependencies:

```sh
# add a dependency to the project
uv add some-package
```

### Style

Code style is enforced by pre-commit hooks. Linter rules are configured in the `ruff`
tables in `pyproject.toml`.

```sh
# before you start developing, install pre-commit hooks
pre-commit install
```

Docstrings should follow the conventions set out in the [Google styleguide](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings).

Please follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)
guidelines when writing commit messages. `commitlint` is enabled as a pre-commit hook.
Valid commit types are defined in `.commitlintrc.yaml`.

## Test

`pytest` and `coverage` are defined as test dependencies.

Run `just test` to execute all unit tests and report on code coverage.

## Release

[Release Please](https://github.com/googleapis/release-please) is used to automate:
- Updating the [changelog](CHANGELOG.md).
- Calculating the new SemVer tag based on conventional commit types.
- Creating a new GitHub release.

Release Please is configured as a GitHub action ([release-please.yaml](.github/workflows/release-please.yaml)).
It keeps a release pull request open that is refreshed as changes are merged into `main`.
To cut a release, simply merge the release pull request.
